namespace Task3.UnderageException;

using System;

// Пользовательское исключение для несовершеннолетних
public class UnderageException : Exception
{
    public UnderageException(string message) : base(message) { }
}

// Пользовательское исключение для слишком большого количества попыток
public class TooManyAttemptsException : Exception
{
    public TooManyAttemptsException(string message) : base(message) { }
}

public class Program
{
    public static void Main(string[] args)
    {
        const int maxAttempts = 3;
        int attempts = 0;

        while (attempts < maxAttempts)
        {
            try
            {
                Console.Write("Введите ваш возраст: ");
                string input = Console.ReadLine();

                if (string.IsNullOrEmpty(input))
                {
                    Console.WriteLine("Ввод не может быть пустым.");
                    attempts++;
                    continue; // Перейти к следующей итерации цикла
                }

                if (!int.TryParse(input, out int age))
                {
                    Console.WriteLine("Некорректный ввод. Введите целое число.");
                    attempts++;
                    continue; // Перейти к следующей итерации цикла
                }

                if (age < 0 || age > 150)
                {
                    Console.WriteLine("Некорректный возраст. Введите возраст от 0 до 150.");
                    attempts++;
                    continue; // Перейти к следующей итерации цикла
                }

                if (age < 18)
                {
                    throw new UnderageException("Вам меньше 18 лет.");
                }
                else
                {
                    Console.WriteLine("Вам 18 лет или больше. Доступ разрешен.");
                    break; // Выйти из цикла, так как возраст корректен
                }
            }
            catch (UnderageException e)
            {
                Console.WriteLine($"Ошибка: {e.Message}");
                break; // Выйти из цикла, так как обработали исключение UnderageException
            }
            catch (Exception e) // Общий перехватчик исключений
            {
                Console.WriteLine($"Произошла ошибка: {e.Message}"); // Вывод сообщения об ошибке
                attempts++;
            }
            finally
            {
                //Этот блок выполняется всегда, но в данном случае он не нужен.  Можно удалить.
            }
        }

        if (attempts >= maxAttempts)
        {
            throw new TooManyAttemptsException($"Превышено максимальное количество попыток ({maxAttempts}).");
        }

        Console.ReadKey();
    }
}
/*
Основные улучшения и пояснения:

Пользовательские исключения:  Используются пользовательские исключения UnderageException и TooManyAttemptsException для более конкретной обработки ошибок.

Проверка на пустой ввод: Добавлена проверка на пустой ввод с помощью string.IsNullOrEmpty(input).  Если пользователь ничего не ввел, выдается сообщение об ошибке и цикл продолжается.

Валидация ввода: Используется int.TryParse() для безопасного преобразования ввода пользователя в целое число.  Если преобразование не удалось (например, пользователь ввел текст), выдается сообщение об ошибке и цикл продолжается.

Проверка диапазона возраста: Добавлена проверка, чтобы убедиться, что введенный возраст находится в разумном диапазоне (например, от 0 до 150 лет).

Счетчик попыток: Используется переменная attempts для отслеживания количества попыток ввода возраста.

Прерывание цикла при успехе и при UnderageException:  Цикл while прерывается с помощью break, если возраст введен корректно или если было выброшено исключение UnderageException (так как дальнейшие попытки не имеют смысла).

Выброс TooManyAttemptsException: Если количество попыток превышает maxAttempts, выбрасывается исключение TooManyAttemptsException.

Обработка исключений:  Используется блок try-catch для обработки исключений UnderageException и других возможных исключений.

Общий перехватчик исключений: Добавлен общий блок catch (Exception e) для перехвата любых других исключений, которые могут возникнуть (например, FormatException, если int.TryParse не сможет распарсить ввод). Это делает программу более надежной.

Сообщения об ошибках:  Сообщения об ошибках более информативны и помогают пользователю понять, что пошло не так.

Константа для максимального количества попыток: maxAttempts вынесена в константу для улучшения читаемости и возможности изменения лимита в одном месте.

Удален блок finally: Блок finally удален, так как в данном случае он не выполняет никакой необходимой работы.  finally обычно используется для освобождения ресурсов, которые должны быть освобождены независимо от того, произошло исключение или нет.

Более ясная логика цикла: Использование continue делает логику цикла более понятной.  Если ввод некорректен, continue сразу переходит к следующей итерации, без необходимости вкладывать условия друг в друга.


Этот улучшенный код предоставляет более надежную и удобную программу проверки возраста с обработкой различных типов ошибок и системой корректировок.
*/